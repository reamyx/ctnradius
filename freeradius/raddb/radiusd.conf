# -*- text -*-

#变量定义
prefix = /usr
exec_prefix = /usr
sysconfdir = /etc
localstatedir = /var
sbindir = /usr/sbin
logdir = ${localstatedir}/log/radius
raddbdir = ${sysconfdir}/raddb
radacctdir = ${logdir}/radacct


#服务名称,同命令行参数 "-n"
name = radiusd

#配置文件和日志文件目录
confdir = ${raddbdir}
modconfdir = ${confdir}/mods-config
certdir = ${confdir}/certs
cadir   = ${confdir}/certs
run_dir = ${localstatedir}/run/${name}
db_dir = ${localstatedir}/lib/radiusd


#预编译模块目录
libdir = /usr/lib64/freeradius


#PID文件
pidfile = ${run_dir}/${name}.pid


#正确转义已启用(默认true,设置为no用于兼容早期版本配置格式)
correct_escapes = true

#请求处理用时上限,秒,建议5-20,用于防止高延迟数据库操作等带来过大开销
max_request_time = 15

#回复缓存清理延迟,回复缓存用于在回复丢失时快速回复NAS的重复请求,建议2-10s
cleanup_delay = 5

#活动请求数上限,包括正在处理的和已回复但缓存请求,达到上限时暂停接受新请求
max_requests = 16384

#主机名称DNS反查,启用时会带来极大的阻塞延时,用于日志记录
hostname_lookups = no

#日志配置
log {
	#日志目的可以是files syslog stdout stderr,-X选项会覆盖此项到stdout
	destination = files
    
	#在stdout和stderr上高亮显示重要消息,输出非TTY或不是xterm时忽略该项
	colourise = yes
    
    #日志文件路径
	file = ${logdir}/radius.log

	#请求日志文件,该项被设置时请求将使用指定文件而不是radius.log
	# requests = ${logdir}/radiusd-%{%{Virtual-Server}:-DEFAULT}-%Y%m%d.log

	#为${destination} == "syslog" 时指定 syslog facility
	syslog_facility = daemon

	#指示日志中记录由User-Name属性提供的命名还是已分离前后缀的名称部分
	stripped_names = no

	#日志中是否记录认证请求
	auth = no

	#日志中是否记录认证被通过及驳回时的密码
	auth_badpass  = no
	auth_goodpass = no

	#日志中记录认证被通过及驳回时的自定义消息
    # msg_goodpass = ""
    # msg_badpass  = ""

	#用户重复拨入超过上限时的回复消息文本
	msg_denied = "You are already logged in - access denied"
}


#执行并发检查的程序路径.
checkrad = ${sbindir}/checkrad


#服务器安全配置
security {
    # chroot = /path/to/chroot/directory
	user = radiusd
	group = radiusd
    
	#发生错误时执行核心转储,调试用
	allow_core_dumps = no
    
	#数据包中超过属性数量上限的属性将被丢弃,该过大会为攻击提供者便利
	max_attributes = 200
    
    #拒绝回复发送延时,用以减少DOS攻击和密码猜测频率,0不延时,建议1-5
	reject_delay = 1
    
	#是否对"Status-Server"请求用Access-Accept或Accounting-Response进行响应
    #用于管理员和NAS通过"ping"检测服务可用状态 raddb/sites-available/status
	status_server = yes
}


#代理配置,未启用代理但其它配置中要求使用代理时将日志一个错误
proxy_requests = yes
$INCLUDE proxy.conf


#客户端准入及参数配置
$INCLUDE clients.conf


#线程池用于实际的请求处理,合理配置以避免资源占用过多或高负载时的处理延时
thread pool {
	#起始线程数量
	start_servers = 5

	#最大线程数量,负载增加时会动态的启动新线程用于请求处理,但最大不超过该值
	max_servers = 32

	#服务器周期性检查空闲线程数并在高于或低于配置的阈值时执行线程增减
	min_spare_servers = 3
	max_spare_servers = 10

	#内部请求队列长度,队列满时将静默丢弃新进入的请求
    # max_queue_size = 65536

    #如果服务器可能存在内存泄露,可配置(建议300)定期清理资源,0表示不需要
	max_requests_per_server = 0
    
	#服务器通过跟踪当前请求处理速率来自动地确定记账包速率限制,记账包在速率
    #超限时被概率丢弃,该操作对业务影响极小,因为通常NAS随后会重发记账包
	auto_limit_acct = no
}


#网络管理(SNMP-trap)配置
# $INCLUDE trigger.conf


#模块定义,该处定义的模块可以配置文件的其它地方按名称引用
modules {
	#每个模块都有指定格式的配置段,"name"为模块名称,用以指示加载的模块插件
    #"instance"为可选的实例名称,如果存在可使用实例名称引用模块实例
    #模块仅在authorize, authenticate等处理段中引用它们时才被初始化
	#格式: name [ instance ] { config_item = value }
    
    $INCLUDE mods-available/always
    $INCLUDE mods-available/attr_filter
    $INCLUDE mods-available/cache_eap
    $INCLUDE mods-available/chap
    $INCLUDE mods-available/date
    $INCLUDE mods-available/detail
    $INCLUDE mods-available/detail.log
    $INCLUDE mods-available/dynamic_clients
    $INCLUDE mods-available/eap
    $INCLUDE mods-available/exec
    $INCLUDE mods-available/expiration
    $INCLUDE mods-available/expr
    $INCLUDE mods-available/files
    $INCLUDE mods-available/linelog
    $INCLUDE mods-available/logintime
    $INCLUDE mods-available/mschap
    $INCLUDE mods-available/ntlm_auth
    $INCLUDE mods-available/pap
    $INCLUDE mods-available/passwd
    $INCLUDE mods-available/preprocess
    $INCLUDE mods-available/radutmp
    $INCLUDE mods-available/realm
    $INCLUDE mods-available/replicate
    $INCLUDE mods-available/soh
    $INCLUDE mods-available/sql
    $INCLUDE mods-available/sradutmp
    $INCLUDE mods-available/unpack
    $INCLUDE mods-available/utf8
}


#模块实例化,此处列出的模块会在处理段引用前加载并初始化,对某些模块这是不
#必要的,因为它们会在后面的段对其引用时进行初始化,但有些模块可能不会在后
#面的任何地方被引用,所以可以在此显式地加载并初始化.
#另外此处严格按照列出的顺序执行模块加载和初始化,这便于处理模块间依赖问题
#其它模块(默认位于"mods-enabled")会在这些模块加载和初始化完成后被加载
instantiate {
	#初始化计数器模块,以便它在可设置计数器的任何模块之前注册CHECK_NAME属性
    # daily

    #此处还可以定义"虚拟模块"用于动态扩展,条件如下:
    #   a. 仅可使用段"redundant","load-balance","redundant-load-balance"
    #   b. 段中仅包含定义过的模块,不能含有子段
    #   c. 所有模块使用同样的rlm_driver,即相同的插件程序
    #条件满足时服务器将使用"虚拟模块"的名称自动注册一个动态扩展,然后
    #可以在其它段中像其他任何扩展一样使用此扩展
	#redundant redundant_sql {
	#	sql1
	#	sql2
	#}

    #过期处理和登陆时长处理模块,在此初始化以注册功能
    expiration
    logintime
    
    sql    
    dynamic_clients
}


#定义的策略和模块实例化中定义的"虚拟模块"一样可通过"name"在其它地方引
#用以代替一系列的条件判断和指令动作,策略类似于普通语言中的子程序,但不能
#递归调用.策略必须在调用前进行定义.
policy {
	$INCLUDE policy.d/
}


#导入其它配置,"authorize {}","authenticate {}", "accounting {}"段以及
#默认服务器配置位于 sites-available/default文件中,其它文件提供了额外的
#虚拟服务器配置,具体参考 sites-available/README

$INCLUDE sites-available/default
$INCLUDE sites-available/inner-tunnel
$INCLUDE sites-available/dynamic-clients


# THE END #
